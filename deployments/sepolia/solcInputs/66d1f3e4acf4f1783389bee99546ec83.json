{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nimport \"./PriceConvert.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract FundMe {\r\n    uint256 public constant minimumUsd = 50 * 1e18;\r\n\r\n    using PriceConvert for uint256;\r\n\r\n    address[] private s_funders;\r\n    mapping(address => uint256) private s_adressToAmountFunded;\r\n    address private immutable i_owner;\r\n    AggregatorV3Interface private s_priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender;\r\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function fund() public payable {\r\n        require(\r\n            msg.value.getConversion(s_priceFeed) >= minimumUsd,\r\n            \"Not Enough for Transaction!!\"\r\n        );\r\n        s_funders.push(msg.sender);\r\n        s_adressToAmountFunded[msg.sender] = msg.value;\r\n    }\r\n\r\n    function withdraw() public payable onlyOwner {\r\n        for (\r\n            uint256 fundedIndex = 0;\r\n            fundedIndex < s_funders.length;\r\n            fundedIndex++\r\n        ) {\r\n            s_adressToAmountFunded[s_funders[fundedIndex]] = 0;\r\n        }\r\n        s_funders = new address[](0);\r\n\r\n        // // transfer\r\n        // payable(msg.sender).transfer(address(this).balance);\r\n        // // send\r\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\r\n        // require(sendSuccess, \"Send failed\");\r\n        // // call\r\n\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    function Cheaperwithdraw() public payable onlyOwner {\r\n        address[] memory funders = s_funders;\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < funders.length;\r\n            funderIndex++\r\n        ) {\r\n            s_adressToAmountFunded[s_funders[funderIndex]] = 0;\r\n        }\r\n        s_funders = new address[](0);\r\n\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == i_owner,\r\n            \"You are not Authorized to withdraw Funds.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function gets_PriceFeed() public view returns (AggregatorV3Interface) {\r\n        return s_priceFeed;\r\n    }\r\n\r\n    function getOnwer() public view returns (address) {\r\n        return i_owner;\r\n    }\r\n\r\n    function getFunder(uint256 index) public view returns (address) {\r\n        return s_funders[index];\r\n    }\r\n\r\n    function getAddressToAmountFunded(\r\n        address fundingAddress\r\n    ) public view returns (uint256) {\r\n        return s_adressToAmountFunded [fundingAddress];\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConvert.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConvert {\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        return uint256(answer * 1e10);\r\n    }\r\n\r\n    function getConversion(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountUsd = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountUsd;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}